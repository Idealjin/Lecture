<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">
	<!--  Mapper Xml에서 사용할수 있는 엘리먼트는 총 9가지이다. -->
	<!--  Cache, Cache-ref, resultMap, parameterMap, sql
		 Select, Insert, Update, delete
	 -->
	 
	 <!--  1. Cache 엘리먼트 -->
	 <!--  Cache와 Cache-ref 엘리먼트는 캐시를 설정하는 엘리먼트이다.
	 	   Cache는 현재 네임스페이스에 대한 캐시 설정이고, cache-ref는 다른 네임스페이스에 대한 캐시 설정 참조를 할 때 사용한다.
	  -->
  
  	<cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>
  	
  	<!-- 디폴트 설정은 다음과 같다.
  		1. 매퍼XML의 모든 select 구문의 결과를 캐시한다.
  		2. 매퍼 xML의 insert, update, delete는 모두 캐시를 지운다.
  		3. 가장 오래동안 사용하지 않는 캐시를 지우는알고리즘 (LRU-Least Recently Used)을 사용한다.
  		4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
  		5. 캐시는 최대 1024개 까지 저장한다.
  		6. 캐시는 읽기/쓰기가 모두 가능하다.
  	 -->
  	<select id="selectCacheTest" resultType="java.lang.String">
  	    SELECT
  	    	   A.MENU_NAME
  	      FROM TBL_MENU A
  	
  	</select>
  
  <!--  2. ResultMap 엘리먼트 -->
  
  <!-- 데이터베이스 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트
  	   ResultMap 엘리먼트는 마이바티스에서 가장 중요하고 강력한 엘리먼트이다.
  	   ResultSet 에서 데이터를 가져올 때 작성되는 JDBC코드를 대부분 줄여주는 역할을 담당한다.
  	   
  	   ResultMap 엘리먼트 속성
  	   1. id : 매핑 구문에서 결과매핑을 사용할 때 구분하기 위한 ID
  	   2. type : 결과 매핑을 적용하는 대상 객체 타입(매핑 구문의 결과 데이터를 저장할 자바타입으로 지정한다.)
  	   3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보로 확장할 때 사용한다. (부모 resultMap 아이디 사용)
  	   4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지 결정
   -->
  
  <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
  	<id property="code" column="MENU_CODE"/>
  	<result property="name" column="MENU_NAME"/>
  	<result property="price" column="MENU_PRICE"/>
  	<result property="categoryCode" column="CATEGORY_CODE"/>
  </resultMap>
  <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1">
    <!-- 위에거를 상속해서 추가적인 것만 넣으면 된다. -->
	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
  </resultMap>
  
  <select id="selectResultMapTest" resultMap="menuResultMap2">
      SELECT
      		 A.MENU_CODE
      	   , A.MENU_NAME
      	   , A.MENU_PRICE
      	   , A.CATEGORY_CODE
      	   , A.ORDERABLE_STATUS
      	FROM TBL_MENU A
       WHERE A.ORDERABLE_STATUS = 'Y'
  </select>
  
  <!-- 2-1 resultMap의 하위 엘리먼트 -->
  <!-- <id> : primary key 컬럼을 매핑하기 위한 태그이다. (성능향상)
       <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그이다.
       <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다. <idArg>, <arg> 하위 엘리먼트가 있다.
       <association> : 복잡한 타입의 연관관계로 1:1 포함관계인 경우 사용한다.
       <collection> : 복잡한 타입의 연관관계로 1:다 포함관계인 경우 사용한다. 
       <discriminator : 조건에 따라 다른 resultMap 매핑 되도록 한다.
  -->
  
  <!-- 2-1-1 <constructor> -->
  <resultMap type="com.ohgiraffers.common.MenuDTO" id="menuResultMap3">
  	<constructor>
  	<!--  id, result 엘리먼트를 이용하면 setter를 이용하기 때문에 property를 지정하지만 순서와 타입을 맞춰서 사용해야 한다.  -->
  		<idArg column="MENU_CODE" javaType="_int"/>
  		<arg column="MENU_NAME" javaType="string"/> 
  		<arg column="MENU_PRICE" javaType="_int"/> 
  		<arg column="CATEGORY_CODE" javaType="_int"/> 
  		<arg column="ORDERABLE_STATUS" javaType="string"/> 
  	</constructor>
  </resultMap>
    
  <select id="selectResultMapConstructorTest"  resultMap="menuResultMap3">
      SELECT
      		 A.MENU_CODE
      	   , A.MENU_NAME
      	   , A.MENU_PRICE
      	   , A.CATEGORY_CODE
      	   , A.ORDERABLE_STATUS
      	FROM TBL_MENU A
       WHERE A.ORDERABLE_STATUS = 'Y'
  </select>
  
  <!-- 2-1-2. association -->
  <!-- <resultMap type="com.ohgiraffers.common.CategoryDTO" id="categoryResultMap">
  	<id property="code" column="CATEGORY_CODE"/>
  	<result property="name" column="CATEGORY_NAME"/>
  	<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
  </resultMap>
  <resultMap type="com.ohgiraffers.common.MenuAndCategoryDTO" id="menuAndCategoryResultMap">
    <id property="code" column="MENU_CODE"/>
  	<result property="name" column="MENU_NAME"/>
  	<result property="price" column="MENU_PRICE"/>
  	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
  	<association property="category" resultMap="categoryResultMap"/>
  </resultMap>
  -->
  <resultMap type="com.ohgiraffers.common.MenuAndCategoryDTO" id="menuAndCategoryResultMap">
    <id property="code" column="MENU_CODE"/>
  	<result property="name" column="MENU_NAME"/>
  	<result property="price" column="MENU_PRICE"/>
  	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
  	<association property="category" javaType="com.ohgiraffers.common.CategoryDTO">
  		<id property="code" column="CATEGORY_CODE"/>
  		<result property="name" column="CATEGORY_NAME"/>
  		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
  	</association>
  </resultMap>
  
  
   
  <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
      SELECT
      		 A.MENU_CODE
      	   , A.MENU_NAME
      	   , A.MENU_PRICE
      	   , B.CATEGORY_CODE
      	   , B.CATEGORY_NAME
      	   , B.REF_CATEGORY_CODE
      	   , A.ORDERABLE_STATUS
      	FROM TBL_MENU A
      	JOIN TBL_CATEGORY B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
       WHERE A.ORDERABLE_STATUS = 'Y'
  </select>
  
  
  <!-- 2-1-3 Collection -->
 <!--   <resultMap type="com.ohgiraffers.common.MenuDTO" id="menuResultMap">
   		<id property="code" column="MENU_CODE"/>
  	<result property="name" column="MENU_NAME"/>
  	<result property="price" column="MENU_PRICE"/>
  	<result property="categoryCode" column="CATEGORY_CODE"/>
  	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
  </resultMap>
  <resultMap type="com.ohgiraffers.common.CategoryAndMenuDTO" id="categoryAndMenuResultMap">
  		<id property="code" column="CATEGORY_CODE"/>
  		<result property="name" column="CATEGORY_NAME"/>
  		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
  		<collection property="menuList" resultMap="menuResultMap"/>
  </resultMap>-->
  <resultMap type="com.ohgiraffers.common.CategoryAndMenuDTO" id="categoryAndMenuResultMap">
  		<id property="code" column="CATEGORY_CODE"/>
  		<result property="name" column="CATEGORY_NAME"/>
  		<result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
  <collection property="menuList" ofType="com.ohgiraffers.common.MenuDTO"> 
  	<id property="code" column="MENU_CODE"/>
  	<result property="name" column="MENU_NAME"/>
  	<result property="price" column="MENU_PRICE"/>
  	<result property="categoryCode" column="CATEGORY_CODE"/>
  	<result property="orderableStatus" column="ORDERABLE_STATUS"/>
  </collection>
  </resultMap>
   <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
   
      SELECT
      		 A.CATEGORY_CODE
      	   , A.CATEGORY_NAME
      	   , A.REF_CATEGORY_CODE
      	   , B.MENU_CODE
      	   , B.MENU_NAME
      	   , B.MENU_PRICE
      	   , B.CATEGORY_CODE
      	   , B.ORDERABLE_STATUS
      	FROM TBL_CATEGORY A
      	LEFT JOIN TBL_MENU B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
       ORDER BY A.CATEGORY_CODE
  </select>
  
  <!-- 3. Sql 엘리먼트 -->
  <!-- 
  	각 매핑 구문에서 공통으로 사용할 수 있는 SQL문자열의 일부를 정의하고 재사용하기 위해 사용한다.
   -->
  <sql id="columns">
      MENU_CODE
    , MENU_NAME
    , MENU_PRICE
    , CATEGORY_CODE
    , ORDERABLE_STATUS
  </sql>
  
  <select id="selectSqlTest" resultMap="menuResultMap2">
      SELECT
      <include refid="columns"/>
        FROM TBL_MENU A
       WHERE A.ORDERABLE_STATUS = 'Y' 
  </select>
  <!-- 4. <insert> 엘리먼트 -->
  <!-- 
  		insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert엘리먼트는 좀더 많은 속성을 정의할 수 있다.
  		공통속성
  		id : 매핑 구문을 구분하는 아이디이다.
  		parameterType : 파라미터의 타입을 지정한다. 이미 정의된 별칭을 사용할 수 있거나, 클래스의 full-name을 적어주면된다.
  		flushCache : 매핑 구문을 실행할 때 캐시를 지을지 여부를 설정한다.
  		timeout : sql을 실행한 후 응답을 기다리는 최대 시간이다. 대개는 설정하지 ㅇ낳고 JDBC 드라이버 자체의 타입아웃 값을 그대로 사용한다.
  		statementType : JDBC 구문 타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중 하나를 쓸 수 있으며 기본 값은 PREPARED이다.
  		
  		insert 추가 속성
  		useGenerateKeys : 생성 키 값을 만들기 위해 JDBC의 getGenerateKeys 메소드를 호출할지 결정하며기본값은 false이다.
  		keyProperty : insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의한 반환값을 설정할 프로퍼티를 지정한다.
  		keyColumn : 생성 키를 가진 테이블의 컬럼명을 설정한다.(키 컬럼이 테이블의 첫 번째 행이 아닌 데이터베이스에서만 필요하다. - PostgreSQL
  		 
   -->
  
  <insert id="insertMenuTest" parameterType="com.ohgiraffers.common.MenuDTO">
      INSERT
        INTO TBL_MENU A
      (
        A.MENU_CODE
      , A.MENU_NAME
      , A.MENU_PRICE
      , A.CATEGORY_CODE
      , A.ORDERABLE_STATUS
      )
  	  VALUES
  	  (
  	    SEQ_MENU_CODE.NEXTVAL
  	  , #{ name }
  	  , #{ price }
  	  , #{categoryCode}
  	  , #{orderableStatus}
  	  )
  </insert>
  <insert id="insertNewCategory">
      INSERT
        INTO TBL_CATEGORY A
      (
        A.CATEGORY_CODE
      , A.CATEGORY_NAME
      , A.REF_CATEGORY_CODE
      )
  	  VALUES
  	  (
  	    SEQ_CATEGORY_CODE.NEXTVAL
  	  , #{ category.name }
  	  , null
  	  )
  
  
  </insert>
  <insert id="insertNewMenu">
      <selectKey keyProperty="category.code" order="BEFORE" resultType="_int"> <!-- keyProperty 안의 값은 객체여야한다. -->
          SELECT
          		 SEQ_CATEGORY_CODE.CURRVAL
            FROM DUAL      
      </selectKey>
      INSERT
        INTO TBL_MENU A
      (
        A.MENU_CODE
      , A.MENU_NAME
      , A.MENU_PRICE
      , A.CATEGORY_CODE
      , A.ORDERABLE_STATUS
      )
  	  VALUES
  	  (
  	    SEQ_MENU_CODE.NEXTVAL
  	  , #{ name }
  	  , #{ price }
  	  , #{category.code}
  	  , #{orderableStatus}
  	  )
  </insert>
  
</mapper>
